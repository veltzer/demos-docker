services:
  # https://github.com/docker-library/docs/blob/master/postgres/README.md
  postgres:
    image: postgres
    restart: unless-stopped
    ports:
      - "${env_db_port}:${env_db_port}"
    environment:
      - POSTGRES_PASSWORD=${env_db_password}
    volumes:
      - "postgres_data:/var/lib/postgresql/data"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: "5s"
      timeout: "5s"
      retries: "5"

  # https://github.com/docker-library/docs/tree/master/adminer
  adminer:
    image: adminer
    restart: unless-stopped
    environment:
      # - ADMINER_DATA=purge
      # - ADMINER_ROOT=postgres
      # - ADMINER_DEFAULT_SERVER=postgres
      - DATABASE_URL=${env_adminer_db_type}://${env_db_user}:${env_db_password}@${env_db_host}:${env_db_port}/${env_db_name}
    ports:
      - "${env_adminer_port}:${env_adminer_port}"
    depends_on:
      - postgres

  # https://postgrest.org/en/v12/explanations/install.html#docker
  postgrest:
    image: postgrest/postgrest
    restart: unless-stopped
    ports:
      - "${env_postgrest_port}:${env_postgrest_port}"
    environment:
      - PGRST_DB_URI=${env_db_type}://${env_db_user}:${env_db_password}@${env_db_host}:${env_db_port}/${env_db_name}
      - PGRST_SERVER_PORT=${env_postgrest_port}
      - PGRST_OPENAPI_SERVER_PROXY_URI=http://127.0.0.1:${env_postgrest_port}
      - PGRST_DB_ANON_ROLE=${env_db_user}
      - PGRST_SERVER_CORS_ALLOWED_ORIGINS=Y
    depends_on:
      - postgres

  # https://hub.docker.com/r/swaggerapi/swagger-ui
  swagger:
    image: swaggerapi/swagger-ui
    restart: unless-stopped
    ports:
      - "8081:8080"
    environment:
      API_URL: "http://${env_postgrest_host}:${env_postgrest_port}/"
    depends_on:
      - postgrest
      - postgres

  node:
    build:
      context: app
      dockerfile: Dockerfile
    image: app
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - env_db_password=${env_db_password}
    ports:
      - "${env_app_port}:${env_app_port}"
    depends_on:
      postgres:
        condition: service_healthy

volumes:
  postgres_data:
